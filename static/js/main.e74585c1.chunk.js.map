{"version":3,"sources":["Components/Slider/Slider.styles.ts","Components/Slider/Slider.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyle","createUseStyles","card","minWidth","width","height","backgroundColor","display","justifyContent","alignItems","word","fontFamily","fontSize","marginLeft","slider","overflow","position","cardLine","app","padding","btnLeft","minHeight","zIndex","top","left","btnRight","right","Slider","data","classes","useState","isEnglish","setIsEnglish","moveAside","setMoveAside","widthCardLine","length","handleClick","handleBtnClick","e","side","className","onClick","style","transform","map","i","Object","keys","values","toString","useStyles","body","margin","Apple","Grape","Application","Perhaps","Competitor","Sweat","Gulp","Throw","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wKAkDeA,EAhDEC,YAAgB,CAC/BC,KAAM,CACJC,SAAU,QACVC,MAAO,cACPC,OAAQ,QACRC,gBAAiB,aACjBC,QAAS,OACTC,eAAgB,SAChBC,WAAY,UAEdC,KAAM,CACJC,WAAY,qBACZC,SAAU,OACVC,WAAY,SAEdC,OAAQ,CACNC,SAAU,SACVX,MAAO,OACPY,SAAU,YAEZC,SAAU,CACRV,QAAS,QAEXW,IAAK,CACHC,QAAS,QAEXC,QAAS,CACPhB,MAAO,OACPiB,UAAW,QACXhB,OAAQ,OACRC,gBAAiB,cACjBU,SAAU,WACVM,OAAQ,IACRC,IAAK,IACLC,KAAM,KAERC,SAAU,CACRrB,MAAO,OACPiB,UAAW,QACXhB,OAAQ,OACRC,gBAAiB,cACjBU,SAAU,WACVM,OAAQ,IACRC,IAAK,IACLG,MAAO,O,OCiBIC,EA1DiB,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,KAC3BC,EAAU7B,IADyC,EAEvB8B,oBAAS,GAFc,mBAElDC,EAFkD,KAEvCC,EAFuC,OAGvBF,mBAAS,GAHc,mBAGlDG,EAHkD,KAGvCC,EAHuC,KAKrDC,EAAqB,UAAoB,IAAdP,EAAKQ,OAAX,MAEnBC,EAAc,WAClBL,GAAcD,IAeVO,EAAiB,SAACC,EAAQC,GACrB,SAATA,EAZIP,EAAY,GACdC,EAAaD,EAAY,KAKvBA,EAA2B,KAAdL,EAAKQ,OAAe,KACnCF,EAAaD,EAAY,MAQ7B,OACE,sBAAKQ,UAAWZ,EAAQf,OAAxB,UACE,qBACE2B,UAAWZ,EAAQT,QACnBsB,QAAS,SAACH,GAAD,OAAOD,EAAeC,EAAG,WAEpC,qBACEE,UAAWZ,EAAQZ,SACnB0B,MAAO,CACLvC,MAAO+B,EACPS,UAAU,cAAD,OAAgBX,EAAhB,QAJb,SAOGL,EAAKiB,KAAI,SAACnC,EAAUoC,GACnB,OACE,qBAAKL,UAAWZ,EAAQ3B,KAAxB,SACE,mBAAGuC,UAAWZ,EAAQnB,KAAMgC,QAASL,EAArC,SACGN,EAAYgB,OAAOC,KAAKtC,GAAQqC,OAAOE,OAAOvC,MAFhBoC,EAAEI,iBAQ3C,qBACET,UAAWZ,EAAQJ,SACnBiB,QAAS,SAACH,GAAD,OAAOD,EAAeC,EAAG,gBCtDpCY,EAAYlD,YAAgB,CAChC,UAAW,CACTmD,KAAM,CACJC,OAAQ,IAGZnC,IAAK,CACHC,QAAS,UAIPS,EAAyC,CAC7C,CAAE0B,MAAO,wCACT,CAAEC,MAAO,oDACT,CAAEC,YAAa,gEACf,CAAEC,QAAS,oDACX,CAAEC,WAAY,0DACd,CAAEC,MAAO,wCACT,CAAEC,KAAM,wCACR,CAAEC,MAAO,+CAaIC,MAVf,WACE,IAAMjC,EAAUsB,IAEhB,OACE,qBAAKV,UAAWZ,EAAQX,IAAxB,SACE,cAAC,EAAD,CAAQU,KAAMA,OChBLmC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.e74585c1.chunk.js","sourcesContent":["import { createUseStyles } from \"react-jss\";\n\nconst useStyle = createUseStyles({\n  card: {\n    minWidth: \"288px\",\n    width: \"calc(100vw)\",\n    height: \"288px\",\n    backgroundColor: \"lightcoral\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  word: {\n    fontFamily: \"Roboto, sans-serif\",\n    fontSize: \"38px\",\n    marginLeft: \"-32px\",\n  },\n  slider: {\n    overflow: \"hidden\",\n    width: \"100%\",\n    position: \"relative\",\n  },\n  cardLine: {\n    display: \"flex\",\n  },\n  app: {\n    padding: \"16px\",\n  },\n  btnLeft: {\n    width: \"20vw\",\n    minHeight: \"288px\",\n    height: \"100%\",\n    backgroundColor: \"transparent\",\n    position: \"absolute\",\n    zIndex: \"1\",\n    top: \"0\",\n    left: \"0\",\n  },\n  btnRight: {\n    width: \"20vw\",\n    minHeight: \"288px\",\n    height: \"100%\",\n    backgroundColor: \"transparent\",\n    position: \"absolute\",\n    zIndex: \"1\",\n    top: \"0\",\n    right: \"0\",\n  },\n});\n\nexport default useStyle;\n","import { useState } from \"react\";\nimport useStyle from \"./Slider.styles\";\n\ntype Props = any;\n\nconst Slider: React.FC<Props> = ({ data }): JSX.Element => {\n  const classes = useStyle();\n  const [isEnglish, setIsEnglish] = useState(true);\n  const [moveAside, setMoveAside] = useState(0);\n\n  let widthCardLine: string = `${data.length * 100}vw`;\n\n  const handleClick = (): void => {\n    setIsEnglish(!isEnglish);\n  };\n\n  const moveLeft = (): void => {\n    if (moveAside < 0) {\n      setMoveAside(moveAside + 100);\n    }\n  };\n\n  const moveRight = (): void => {\n    if (moveAside > -data.length * 100 + 100) {\n      setMoveAside(moveAside - 100);\n    }\n  };\n\n  const handleBtnClick = (e: any, side: string) => {\n    side === \"left\" ? moveLeft() : moveRight();\n  };\n\n  return (\n    <div className={classes.slider}>\n      <div\n        className={classes.btnLeft}\n        onClick={(e) => handleBtnClick(e, \"left\")}\n      ></div>\n      <div\n        className={classes.cardLine}\n        style={{\n          width: widthCardLine,\n          transform: `translateX(${moveAside}vw)`,\n        }}\n      >\n        {data.map((word: {}, i: number) => {\n          return (\n            <div className={classes.card} key={i.toString()}>\n              <p className={classes.word} onClick={handleClick}>\n                {isEnglish ? Object.keys(word) : Object.values(word)}\n              </p>\n            </div>\n          );\n        })}\n      </div>\n      <div\n        className={classes.btnRight}\n        onClick={(e) => handleBtnClick(e, \"right\")}\n      ></div>\n    </div>\n  );\n};\n\nexport default Slider;\n","import { createUseStyles } from \"react-jss\";\nimport Slider from \"./Components/Slider/Slider\";\n\nconst useStyles = createUseStyles({\n  \"@global\": {\n    body: {\n      margin: 0,\n    },\n  },\n  app: {\n    padding: \"16px\",\n  },\n});\n\nconst data: Array<{ [key: string]: string }> = [\n  { Apple: \"Яблоко\" },\n  { Grape: \"Виноград\" },\n  { Application: \"Приложение\" },\n  { Perhaps: \"Возможно\" },\n  { Competitor: \"Конкурент\" },\n  { Sweat: \"Потеть\" },\n  { Gulp: \"Глоток\" },\n  { Throw: \"Бросать\" },\n];\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.app}>\n      <Slider data={data} />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}